// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from 'graphql';
import { User, Context } from '../types';

export type Role = 'SUPERADMIN' | 'ADMIN' | 'BASIC' | 'NONE';

export namespace QueryResolvers {
    export const defaultResolvers = {};

    export type InfoResolver =
        | ((parent: undefined, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>)
        | {
              fragment: string;
              resolve: (
                  parent: undefined,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo
              ) => string | Promise<string>;
          };

    export type ListUsersResolver =
        | ((parent: undefined, args: {}, ctx: Context, info: GraphQLResolveInfo) => User[] | Promise<User[]>)
        | {
              fragment: string;
              resolve: (
                  parent: undefined,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo
              ) => User[] | Promise<User[]>;
          };

    export interface Type {
        info:
            | ((parent: undefined, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>)
            | {
                  fragment: string;
                  resolve: (
                      parent: undefined,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo
                  ) => string | Promise<string>;
              };

        listUsers:
            | ((parent: undefined, args: {}, ctx: Context, info: GraphQLResolveInfo) => User[] | Promise<User[]>)
            | {
                  fragment: string;
                  resolve: (
                      parent: undefined,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo
                  ) => User[] | Promise<User[]>;
              };
    }
}

export namespace UserResolvers {
    export const defaultResolvers = {
        username: (parent: User) => parent.username,
        firstname: (parent: User) => parent.firstname,
        surname: (parent: User) => parent.surname,
        role: (parent: User) => parent.role,
    };

    export type UsernameResolver =
        | ((parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>)
        | {
              fragment: string;
              resolve: (parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;
          };

    export type FirstnameResolver =
        | ((parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>)
        | {
              fragment: string;
              resolve: (parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;
          };

    export type SurnameResolver =
        | ((parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>)
        | {
              fragment: string;
              resolve: (parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;
          };

    export type RoleResolver =
        | ((parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => Role | Promise<Role>)
        | {
              fragment: string;
              resolve: (parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => Role | Promise<Role>;
          };

    export interface Type {
        username:
            | ((parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>)
            | {
                  fragment: string;
                  resolve: (parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;
              };

        firstname:
            | ((parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>)
            | {
                  fragment: string;
                  resolve: (parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;
              };

        surname:
            | ((parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>)
            | {
                  fragment: string;
                  resolve: (parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;
              };

        role:
            | ((parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => Role | Promise<Role>)
            | {
                  fragment: string;
                  resolve: (parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => Role | Promise<Role>;
              };
    }
}

export interface Resolvers {
    Query: QueryResolvers.Type;
    User: UserResolvers.Type;
}

// @ts-ignore
declare module 'graphql-tools' {
    interface IResolvers extends Resolvers {}
}
