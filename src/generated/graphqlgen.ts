// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from 'graphql';
import { User, LastUpdate, AuthPayload, Context } from '../types';

export type Role = 'SUPERADMIN' | 'ADMIN' | 'BASIC' | 'NONE';

export namespace QueryResolvers {
    export const defaultResolvers = {};

    export type InfoResolver =
        | ((parent: undefined, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>)
        | {
              fragment: string;
              resolve: (
                  parent: undefined,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo
              ) => string | Promise<string>;
          };

    export type ListUsersResolver =
        | ((parent: undefined, args: {}, ctx: Context, info: GraphQLResolveInfo) => User[] | Promise<User[]>)
        | {
              fragment: string;
              resolve: (
                  parent: undefined,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo
              ) => User[] | Promise<User[]>;
          };

    export type GetLastUpdateResolver =
        | ((
              parent: undefined,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo
          ) => LastUpdate[] | Promise<LastUpdate[]>)
        | {
              fragment: string;
              resolve: (
                  parent: undefined,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo
              ) => LastUpdate[] | Promise<LastUpdate[]>;
          };

    export type GithubLoginUrlResolver =
        | ((parent: undefined, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>)
        | {
              fragment: string;
              resolve: (
                  parent: undefined,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo
              ) => string | Promise<string>;
          };

    export interface Type {
        info:
            | ((parent: undefined, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>)
            | {
                  fragment: string;
                  resolve: (
                      parent: undefined,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo
                  ) => string | Promise<string>;
              };

        listUsers:
            | ((parent: undefined, args: {}, ctx: Context, info: GraphQLResolveInfo) => User[] | Promise<User[]>)
            | {
                  fragment: string;
                  resolve: (
                      parent: undefined,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo
                  ) => User[] | Promise<User[]>;
              };

        getLastUpdate:
            | ((
                  parent: undefined,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo
              ) => LastUpdate[] | Promise<LastUpdate[]>)
            | {
                  fragment: string;
                  resolve: (
                      parent: undefined,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo
                  ) => LastUpdate[] | Promise<LastUpdate[]>;
              };

        githubLoginUrl:
            | ((parent: undefined, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>)
            | {
                  fragment: string;
                  resolve: (
                      parent: undefined,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo
                  ) => string | Promise<string>;
              };
    }
}

export namespace UserResolvers {
    export const defaultResolvers = {
        username: (parent: User) => parent.username,
        firstname: (parent: User) => parent.firstname,
        surname: (parent: User) => parent.surname,
        role: (parent: User) => parent.role,
    };

    export type UsernameResolver =
        | ((parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>)
        | {
              fragment: string;
              resolve: (parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;
          };

    export type FirstnameResolver =
        | ((parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>)
        | {
              fragment: string;
              resolve: (parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;
          };

    export type SurnameResolver =
        | ((parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>)
        | {
              fragment: string;
              resolve: (parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;
          };

    export type RoleResolver =
        | ((parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => Role | Promise<Role>)
        | {
              fragment: string;
              resolve: (parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => Role | Promise<Role>;
          };

    export interface Type {
        username:
            | ((parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>)
            | {
                  fragment: string;
                  resolve: (parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;
              };

        firstname:
            | ((parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>)
            | {
                  fragment: string;
                  resolve: (parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;
              };

        surname:
            | ((parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>)
            | {
                  fragment: string;
                  resolve: (parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>;
              };

        role:
            | ((parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => Role | Promise<Role>)
            | {
                  fragment: string;
                  resolve: (parent: User, args: {}, ctx: Context, info: GraphQLResolveInfo) => Role | Promise<Role>;
              };
    }
}

export namespace LastUpdateResolvers {
    export const defaultResolvers = {
        username: (parent: LastUpdate) => parent.username,
        firstname: (parent: LastUpdate) => parent.firstname,
        lastUpdate: (parent: LastUpdate) => (parent.lastUpdate === undefined ? null : parent.lastUpdate),
    };

    export type UsernameResolver =
        | ((parent: LastUpdate, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>)
        | {
              fragment: string;
              resolve: (
                  parent: LastUpdate,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo
              ) => string | Promise<string>;
          };

    export type FirstnameResolver =
        | ((parent: LastUpdate, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>)
        | {
              fragment: string;
              resolve: (
                  parent: LastUpdate,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo
              ) => string | Promise<string>;
          };

    export type LastUpdateResolver =
        | ((
              parent: LastUpdate,
              args: {},
              ctx: Context,
              info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>)
        | {
              fragment: string;
              resolve: (
                  parent: LastUpdate,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo
              ) => string | null | Promise<string | null>;
          };

    export interface Type {
        username:
            | ((parent: LastUpdate, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>)
            | {
                  fragment: string;
                  resolve: (
                      parent: LastUpdate,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo
                  ) => string | Promise<string>;
              };

        firstname:
            | ((parent: LastUpdate, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>)
            | {
                  fragment: string;
                  resolve: (
                      parent: LastUpdate,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo
                  ) => string | Promise<string>;
              };

        lastUpdate:
            | ((
                  parent: LastUpdate,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo
              ) => string | null | Promise<string | null>)
            | {
                  fragment: string;
                  resolve: (
                      parent: LastUpdate,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo
                  ) => string | null | Promise<string | null>;
              };
    }
}

export namespace MutationResolvers {
    export const defaultResolvers = {};

    export interface ArgsLogin {
        usrname: string;
        password: string;
    }

    export interface ArgsAddUpdates {
        date: string;
        usrnames: string[];
    }

    export type LoginResolver =
        | ((
              parent: undefined,
              args: ArgsLogin,
              ctx: Context,
              info: GraphQLResolveInfo
          ) => AuthPayload | null | Promise<AuthPayload | null>)
        | {
              fragment: string;
              resolve: (
                  parent: undefined,
                  args: ArgsLogin,
                  ctx: Context,
                  info: GraphQLResolveInfo
              ) => AuthPayload | null | Promise<AuthPayload | null>;
          };

    export type AddUpdatesResolver =
        | ((
              parent: undefined,
              args: ArgsAddUpdates,
              ctx: Context,
              info: GraphQLResolveInfo
          ) => string | Promise<string>)
        | {
              fragment: string;
              resolve: (
                  parent: undefined,
                  args: ArgsAddUpdates,
                  ctx: Context,
                  info: GraphQLResolveInfo
              ) => string | Promise<string>;
          };

    export interface Type {
        login:
            | ((
                  parent: undefined,
                  args: ArgsLogin,
                  ctx: Context,
                  info: GraphQLResolveInfo
              ) => AuthPayload | null | Promise<AuthPayload | null>)
            | {
                  fragment: string;
                  resolve: (
                      parent: undefined,
                      args: ArgsLogin,
                      ctx: Context,
                      info: GraphQLResolveInfo
                  ) => AuthPayload | null | Promise<AuthPayload | null>;
              };

        addUpdates:
            | ((
                  parent: undefined,
                  args: ArgsAddUpdates,
                  ctx: Context,
                  info: GraphQLResolveInfo
              ) => string | Promise<string>)
            | {
                  fragment: string;
                  resolve: (
                      parent: undefined,
                      args: ArgsAddUpdates,
                      ctx: Context,
                      info: GraphQLResolveInfo
                  ) => string | Promise<string>;
              };
    }
}

export namespace AuthPayloadResolvers {
    export const defaultResolvers = {
        token: (parent: AuthPayload) => parent.token,
        user: (parent: AuthPayload) => parent.user,
    };

    export type TokenResolver =
        | ((parent: AuthPayload, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>)
        | {
              fragment: string;
              resolve: (
                  parent: AuthPayload,
                  args: {},
                  ctx: Context,
                  info: GraphQLResolveInfo
              ) => string | Promise<string>;
          };

    export type UserResolver =
        | ((parent: AuthPayload, args: {}, ctx: Context, info: GraphQLResolveInfo) => User | Promise<User>)
        | {
              fragment: string;
              resolve: (parent: AuthPayload, args: {}, ctx: Context, info: GraphQLResolveInfo) => User | Promise<User>;
          };

    export interface Type {
        token:
            | ((parent: AuthPayload, args: {}, ctx: Context, info: GraphQLResolveInfo) => string | Promise<string>)
            | {
                  fragment: string;
                  resolve: (
                      parent: AuthPayload,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo
                  ) => string | Promise<string>;
              };

        user:
            | ((parent: AuthPayload, args: {}, ctx: Context, info: GraphQLResolveInfo) => User | Promise<User>)
            | {
                  fragment: string;
                  resolve: (
                      parent: AuthPayload,
                      args: {},
                      ctx: Context,
                      info: GraphQLResolveInfo
                  ) => User | Promise<User>;
              };
    }
}

export interface Resolvers {
    Query: QueryResolvers.Type;
    User: UserResolvers.Type;
    LastUpdate: LastUpdateResolvers.Type;
    Mutation: MutationResolvers.Type;
    AuthPayload: AuthPayloadResolvers.Type;
}

// @ts-ignore
declare module 'graphql-tools' {
    interface IResolvers extends Resolvers {}
}
